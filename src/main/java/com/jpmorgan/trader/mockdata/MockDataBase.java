package com.jpmorgan.trader.mockdata;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

import com.jpmorgan.trader.domain.CurrencyToWeekEndMapping;
import com.jpmorgan.trader.domain.Instruction;
import com.jpmorgan.trader.domain.Order;
import com.jpmorgan.trader.domain.Trade;
import com.jpmorgan.trader.domain.TradeDetails;
import com.jpmorgan.trader.enums.OrderStatus;
import com.jpmorgan.trader.value.AmountReport;
import com.jpmorgan.trader.value.EntityRankKey;
import com.jpmorgan.trader.value.EntityRankReport;
import com.jpmorgan.trader.value.Message;

/**
 * This is mock data. In real world it would be replaced by JPA/Hibernate calls,
 * named queries etc.
 * 
 * Here, it also have instruction set as input. Here, it acts as cache, memory
 * database etc. We are doing sum, group by here in java but in real world it
 * would be in SQL.
 * 
 * @author Administrative
 *
 */
public class MockDataBase {
	private static List<Trade> tradeList = new ArrayList<>();
	private static List<TradeDetails> tradeDetailsList = new ArrayList<>();
	private static List<AmountReport> outgoingAmountEveryDay = new ArrayList<>();
	private static List<AmountReport> incomingAmountEveryDay = new ArrayList<>();
	private static List<EntityRankReport> incomingEntityRankEveryDay = new ArrayList<>();
	private static List<EntityRankReport> outcomingEntityRankEveryDay = new ArrayList<>();
	// Add data here if you want to test with more data
	private static String[][] inputInstructionData = {
			{ "foo", "B", "0.50", "SGP", "2016/01/01", "2016/01/02", "200", "100.25" },
			{ "bar", "S", "0.22", "AED", "2016/01/05", "2016/01/07", "450", "150.5" } };

	private static List<Message> inputMessages = new ArrayList<>();

	private static int count = 0;

	public static List<CurrencyToWeekEndMapping> getCurrencyToWeekEndMap() {
		List<CurrencyToWeekEndMapping> currencyToWeekEndMappingList = new ArrayList<CurrencyToWeekEndMapping>();
		currencyToWeekEndMappingList.add(new CurrencyToWeekEndMapping("SGP", "SAT,SUN"));
		currencyToWeekEndMappingList.add(new CurrencyToWeekEndMapping("AED", "FRI,SAT"));
		currencyToWeekEndMappingList.add(new CurrencyToWeekEndMapping("SAR", "FRI,SAT"));

		return currencyToWeekEndMappingList;
	}

	public static Instruction getInstruction(String[] message) throws ParseException {
		Instruction instruction = new Instruction();
		instruction.setEntityName(message[0]);
		instruction.setAction(message[1]);
		instruction.setAgreedFx(new BigDecimal(message[2]));
		instruction.setCurrency(message[3]);
		instruction.setInstructionDate(new SimpleDateFormat("yyyy/MM/dd", Locale.ENGLISH).parse(message[4]));
		instruction.setSettlementDate(new SimpleDateFormat("yyyy/MM/dd", Locale.ENGLISH).parse(message[5]));
		instruction.setUnits(new Long(message[6]));
		instruction.setPricePerUnit(new BigDecimal(message[7]));
		return instruction;
	}

	public static Instruction addInstruction(Instruction instruction) {
		// after saving to database, new instruction id would be generated by hibernate
		instruction.setInstructionId(getUniqueId());
		return instruction;
	}

	public static Order saveOrder(Order order) {
		// after saving to database, new order id would be generated by hibernate
		order.setOrderId(getUniqueId());
		return order;
	}

	public static OrderStatus getOrderStatus() {
		count++;
		if (count % 2 == 0) {
			// if the entity is available at the price ordered then it can executed with
			// success
			return OrderStatus.SUCCESS;
		} else if (count % 3 == 0) {
			// If the entity is NOT available at the price it is ordered
			// then order will remain in pending state
			return OrderStatus.PENDING;
		} else if (count % 5 == 0) {
			// if the money in account is less than the order amount then it can be rejected
			return OrderStatus.REJECTED;
		} else {
			return OrderStatus.SUCCESS;
		}
	}

	public static Trade saveTrade(Trade trade) {
		// after saving to database, new trade id would be generated by hibernate
		trade.setTradeId(getUniqueId());
		tradeList.add(trade);
		return trade;
	}

	private static long getUniqueId() {
		// In real world, hibernate will return new generated ID here
		return System.currentTimeMillis();
	}

	public static List<Trade> getTradeList() {
		return tradeList;
	}

	public static List<AmountReport> retrieveOutgoingAmountEveryDay() {
		List<AmountReport> tradeAmountValueList = new ArrayList<>();
		// here group by action and date and sum the amount for action "B"
		// Here java 8 feature of Group By, sum etc, can be used
		// not doing it due to time constraint
		Map<Date, BigDecimal> outgoingAmountEveryDayMap = new HashMap<>();
		for (TradeDetails tradeDetails : tradeDetailsList) {
			if ("B".equals(tradeDetails.getAction())) {
				if (outgoingAmountEveryDayMap.get(tradeDetails.getSettlementDate()) == null) {
					outgoingAmountEveryDayMap.put(tradeDetails.getSettlementDate(),
							tradeDetails.getAmountOfTradeInUSD());
				} else {
					outgoingAmountEveryDayMap.get(tradeDetails.getSettlementDate())
							.add(tradeDetails.getAmountOfTradeInUSD());
				}
			}
		}
		outgoingAmountEveryDayMap.forEach((key, value) -> tradeAmountValueList.add(new AmountReport(value, key)));
		return tradeAmountValueList;
	}

	public static List<AmountReport> retrieveIncomingAmountEveryDay() {
		List<AmountReport> tradeAmountValueList = new ArrayList<>();
		// here group by action and date and sum the amount for action "S"
		// Here java 8 feature of Group By, sum etc, can be used
		// not doing it due to time constraint
		Map<Date, BigDecimal> incomingAmountEveryDayMap = new HashMap<>();
		for (TradeDetails tradeDetails : tradeDetailsList) {
			if ("S".equals(tradeDetails.getAction())) {
				if (incomingAmountEveryDayMap.get(tradeDetails.getSettlementDate()) == null) {
					incomingAmountEveryDayMap.put(tradeDetails.getSettlementDate(),
							tradeDetails.getAmountOfTradeInUSD());
				} else {
					incomingAmountEveryDayMap.get(tradeDetails.getSettlementDate())
							.add(tradeDetails.getAmountOfTradeInUSD());
				}
			}
		}
		incomingAmountEveryDayMap.forEach((key, value) -> tradeAmountValueList.add(new AmountReport(value, key)));
		return tradeAmountValueList;
	}

	public static List<EntityRankReport> retrieveIncomingEntityRankEveryDay() {
		List<EntityRankReport> entityRankList = new ArrayList<>();
		// here group by action,date and entity and rank the entity for action "B"
		// Here java 8 feature of Group By, sum, max, order by etc, can be used
		// not doing it due to time constraint
		Map<EntityRankKey, BigDecimal> incomingEntityRankEveryDayMap = new HashMap<>();
		for (TradeDetails tradeDetails : tradeDetailsList) {
			if ("B".equals(tradeDetails.getAction())) {
				EntityRankKey entityRankKey = new EntityRankKey(tradeDetails.getEntityName(),
						tradeDetails.getSettlementDate());
				if (incomingEntityRankEveryDayMap.get(entityRankKey) == null) {
					incomingEntityRankEveryDayMap.put(entityRankKey, tradeDetails.getAmountOfTradeInUSD());
				} else {
					incomingEntityRankEveryDayMap.get(entityRankKey).add(tradeDetails.getAmountOfTradeInUSD());
				}
			}
		}

		incomingEntityRankEveryDayMap = incomingEntityRankEveryDayMap.entrySet().stream()
				.sorted(Collections.reverseOrder(Map.Entry.comparingByValue()))
				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e2, LinkedHashMap::new));
		final AtomicInteger rank = new AtomicInteger(0);
		incomingEntityRankEveryDayMap.forEach((key, value) -> entityRankList
				.add(new EntityRankReport(key.getEntityName(), key.getDate(), rank.incrementAndGet())));
		return entityRankList;
	}

	public static List<EntityRankReport> retrieveOutgoingEntityRankEveryDay() {
		List<EntityRankReport> entityRankList = new ArrayList<>();
		// here group by action,date and entity and rank the entity for action "S"
		// Here java 8 feature of Group By, sum, max, order by etc, can be used
		// not doing it due to time constraint
		Map<EntityRankKey, BigDecimal> outgoingEntityRankEveryDayMap = new HashMap<>();
		for (TradeDetails tradeDetails : tradeDetailsList) {
			if ("S".equals(tradeDetails.getAction())) {
				EntityRankKey entityRankKey = new EntityRankKey(tradeDetails.getEntityName(),
						tradeDetails.getSettlementDate());
				if (outgoingEntityRankEveryDayMap.get(entityRankKey) == null) {
					outgoingEntityRankEveryDayMap.put(entityRankKey, tradeDetails.getAmountOfTradeInUSD());
				} else {
					outgoingEntityRankEveryDayMap.get(entityRankKey).add(tradeDetails.getAmountOfTradeInUSD());
				}
			}
		}

		outgoingEntityRankEveryDayMap = outgoingEntityRankEveryDayMap.entrySet().stream()
				.sorted(Collections.reverseOrder(Map.Entry.comparingByValue()))
				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e2, LinkedHashMap::new));
		final AtomicInteger rank = new AtomicInteger(0);
		outgoingEntityRankEveryDayMap.forEach((key, value) -> entityRankList
				.add(new EntityRankReport(key.getEntityName(), key.getDate(), rank.incrementAndGet())));
		return entityRankList;
	}

	public static List<Message> getInputMessages() {

		for (int count = 0; count < inputInstructionData.length; count++) {
			Message message = new Message();
			message.setJsonString(inputInstructionData[count]);
			inputMessages.add(message);
		}
		return inputMessages;
	}

	public static List<TradeDetails> getTradeDetailsList() {
		return tradeDetailsList;
	}

	public static void saveTradeDetails(List<TradeDetails> tradeDetailsListP) {
		tradeDetailsList = tradeDetailsListP;
	}

}
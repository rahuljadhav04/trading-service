package com.jpmorgan.trader.listener;

import java.text.ParseException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.jpmorgan.trader.domain.Instruction;
import com.jpmorgan.trader.domain.Order;
import com.jpmorgan.trader.enums.OrderStatus;
import com.jpmorgan.trader.service.InstructionService;
import com.jpmorgan.trader.service.OrderService;
import com.jpmorgan.trader.service.TradeService;

/**
 * This can be JMS listener in real time listening to instructions received
 * 
 * Here it is just having one method to receive instruction from main class. But
 * in real time, it can have JMS listner annotation which can have queue name
 * etc.
 * 
 * @author Administrative
 *
 */
@Component
public class InstructionListner {

	@Autowired
	private InstructionService instructionService;
	@Autowired
	private OrderService orderService;
	@Autowired
	private TradeService tradeService;

	// In real world, Use JMSListener annotation here so this method will get
	// automatically called
	// when message sent to JMS Queue
	public void onMessage(Instruction instruction) throws ParseException {

		instruction = instructionService.saveInstruction(instruction);
		// instruction id generated by hibernate after saving instruction into database

		// Order executed..the status can be success, pending or rejected
		Order order = orderService.executeOrder(instruction);
		// if order is successful then it will be saved as trade in database
		if (order.getOrderStatus() == OrderStatus.SUCCESS) {
			tradeService.saveTrade(order);
		}

	}

}

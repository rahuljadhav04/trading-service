package com.jpmorgan.trader.listener;

import java.text.ParseException;

import com.jpmorgan.trader.domain.Instruction;
import com.jpmorgan.trader.domain.Order;
import com.jpmorgan.trader.enums.OrderStatus;
import com.jpmorgan.trader.mockdata.MockDataBase;
import com.jpmorgan.trader.service.InstructionService;
import com.jpmorgan.trader.service.InstructionServiceImpl;
import com.jpmorgan.trader.service.OrderService;
import com.jpmorgan.trader.service.OrderServiceImpl;
import com.jpmorgan.trader.service.TradeService;
import com.jpmorgan.trader.service.TradeServiceImpl;
import com.jpmorgan.trader.value.Message;

/**
 * This can be JMS listener in real time listening to instructions received
 * 
 * Here it is just having one method to receive instruction from main class. But
 * in real time, it can have JMS listner annotation which can have queue name
 * etc.
 * 
 * @author Administrative
 *
 */
public class InstructionListner {

	InstructionService instructionService = new InstructionServiceImpl();
	OrderService orderService = new OrderServiceImpl();
	TradeService tradeService = new TradeServiceImpl();

	// In real world, Use JMSListener annotation here so this method will get
	// automatically called
	// when message sent to JMS Queue
	public void onMessage(Message message) throws ParseException {
		String[] jsonString = message.getJsonString();
		// Use JSONUtils to convert json into java object Instruction
		Instruction instruction = MockDataBase.getInstruction(jsonString);

		instruction = instructionService.saveInstruction(instruction);
		// instruction id generated by hibernate after saving instruction into database

		// Order executed..the status can be success, pending or rejected
		Order order = orderService.executeOrder(instruction);
		// if order is successful then it will be saved as trade in database
		if (order.getOrderStatus() == OrderStatus.SUCCESS) {
			tradeService.saveTrade(order);
		}

	}
}
